name: Branch Build Using Docker

on:
  push:
    branches:
      - feature/*
      - hotfix/*
      - release/*
      - master
      - development

env:
  # solution path doesn't need slashes unless there it is multiple folders deep
  # solution name does not include extension. .sln is assumed
  SOLUTION_PATH: PepperDash Core
  SOLUTION_FILE: PepperDash Core
  VERSION: 0.0.0-buildtype-buildnumber
  BUILD_TYPE: Debug
  RELEASE_BRANCH: master
jobs:
  build_project:
    runs-on: windows-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Checkout submodules
        shell: bash
        run: |
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          auth_header="$(git config --local --get http.https://github.com/.extraheader)"
          git submodule sync --recursive
          git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
      - name: Set Build to Release if triggered from Master
        run: |
          if("$($Env:GITHUB_REF)".contains("$($Env:RELEASE_BRANCH)")) {
            Write-Host "Setting build type to Release"
            Write-Output "::set-env name=BUILD_TYPE::Release"
          }

      - name: Fetch tags
        run: git fetch --tags
      - name: Set Version Number
        shell: powershell
        run: |
          $version = ./.github/scripts/GenerateVersionNumber.ps1
          Write-Output "::set-env name=VERSION::$version"
      - name: Update AssemblyInfo.cs
        shell: powershell
        run: |
          Write-Output ${{ env.VERSION }}
          ./.github/scripts/UpdateAssemblyVersion.ps1 ${{ env.VERSION }}
      - name: Build Solution
        shell: powershell
        run: |
          Invoke-Expression "docker run --rm --mount type=bind,source=""$($Env:GITHUB_WORKSPACE)"",target=""c:/project"" pepperdash/sspbuilder c:\cihelpers\vsidebuild.exe -Solution ""c:\project\$($Env:SOLUTION_PATH)\$($Env:SOLUTION_FILE).sln"" -BuildSolutionConfiguration $($ENV:BUILD_TYPE)"
          ./.github/scripts/ZipBuildOutput.ps1
      - name: Write Version
        run: 
          Write-Output "VERSION = $($Env:VERSION), BRANCH = $($Env:GITHUB_REF)" | Out-File -FilePath ".\properties.txt"
      - name: Upload Build Output
        uses: actions/upload-artifact@v1
        with:
          name: Build
          path: ./${{ env.SOLUTION_FILE}}-${{ env.VERSION}}.zip
      - name: Upload Version.txt
        uses: actions/upload-artifact@v1
        with:
          name: Properties
          path: ./output/properties.txt
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   with:
      #     tag_name: v${{ env.VERSION  }}
      #     release_name: v${{ env.VERSION }}
      #     prerelease: ${{contains('debug', env.BUILD_TYPE)}}
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # - name: Upload
      #   id: upload_release
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./${{ env.SOLUTION_FILE}}-${{ env.VERSION}}.zip
      #     asset_name: ${{ env.SOLUTION_FILE}}-${{ env.VERSION}}.zip
      #     asset_content_type: application/zip
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  internal_push_output:
    needs: build_project
    runs-on: windows-latest
    steps:
       - name: Download Build Propeties 
        uses: actions/download-artifact@v1
        with:
          name: Properties
      - name: Check Directory
        run: Get-ChildItem "./"
      - name: Set Version Number
        shell: powershell
        run: |
         Get-ChildItem "./Properties"
         Write-Host "Workflow Commit: ${{ env.GITHUB_SHA}}"
         Write-Host "Workflow Branch: ${{ env.GITHUB_REF}}"
         $properties = Get-Content -Path ./properties.txt
         Write-Host $properties
         $properties -match "VERSION = (?<version>.*),.*BRANCH = (?<build>.*)"
         $version = $matches['version']
         $branch = $matches['build']
         Write-Host "Version: $version"
         Write-Host "Branch: $branch"
         Write-Output "::set-env name=VERSION::$version"
         Write-Output "::set-env name=BRANCH::$branch"
         Remove-Item -Path ./Properties/Properties.txt
         Remove-Item -Path ./Properties
      - name: Check Directory
        run: |
          Get-ChildItem "./"
      - name: Checkout Internal Builds Repo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BUILDS_TOKEN }}
          repository: PepperDash-Engineering/pepperdash-core-builds
          ref: ${{ env.BRANCH }}
      - name: Download Build output
        uses: actions/download-artifact@v1
        with:
          name: Build
          path: ./build.zip
      - name: 
        shell: powershell
        run: |
          git add .
          git commit -m "Build # ${{ env.GITHUB_RUN_NUMBER }} from commit: https://github.com/PepperDash/PepperDashCore/commit/${{ env.GITHUB_SHA }}"
          git tag ${{ env.VERSION }} --dry-run
          git push --set-upstream origin +${{ env.GITHUB_REF#*/}} --force --dry-run
          git push tags origin --dry-run
  # public_push_output:
  #   needs: build_project
  #   runs-on: windows-latest
  #   steps:
  #     - name: Checkout public Builds Repo
  #       uses: actions/checkout@v2
  #       with:
  #         token: ${{ secrets.BUILDS_TOKEN }}
  #         path: ./internal_builds_repo
  #         repository: PepperDash-Engineering/pepperdash-core-builds
  #     - name: Download Build output
      #   uses: actions/download-artifact@v1
      #   with:
      #     name: Build
      #     path: ./build.zip
      # - name: Download Version Info
      #   uses: actions/download-artifact@v1
      #   with:
      #     name: Version
      # - name: Check Directory
      #   run: Get-ChildItem "./"
      # - name: Set Version Number
      #   shell: powershell
      #   run: |
      #    Get-ChildItem "./"
      #    $version = Get-Content -Path ./version.txt
      #    Write-Output "::set-env name=VERSION::$version"
      #    Remove-Item -Path ./version.txt
      # - name: Check Directory
      #   run: |
      #     Get-ChildItem "./"
